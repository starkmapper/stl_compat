cmake_minimum_required(VERSION 3.0.0)

set(nuget_dest ${CMAKE_BINARY_DIR}/nuget.exe)
function(download_nuget)
  message(STATUS "downloading nuget")
  file(DOWNLOAD https://dist.nuget.org/win-x86-commandline/latest/nuget.exe ${CMAKE_BINARY_DIR}/nuget.exe)
endfunction(download_nuget)

function(install_nuget_package package_name)
  find_program(nuget_program NAMES nuget)
  if(${nuget_program} STREQUAL "nuget_program-NOTFOUND")
    download_nuget()
    find_program(nuget_program NAMES nuget)
  endif()
  execute_process(COMMAND ${nuget_program} install ${package_name} -OutputDirectory ${CMAKE_BINARY_DIR}/packages -ExcludeVersion)
endfunction(install_nuget_package)


function(install_boost_lib lib_name)
  if(${MSVC})
    if(${MSVC_VERSION} EQUAL 1200)
      set(msvc_lib_version 60)
    elseif(${MSVC_VERSION} EQUAL 1300)
      set(msvc_lib_version 70)
    elseif(${MSVC_VERSION} EQUAL 1310)
      set(msvc_lib_version 71)
    elseif(${MSVC_VERSION} EQUAL 1400)
      set(msvc_lib_version 80)
    elseif(${MSVC_VERSION} EQUAL 1500)
      set(msvc_lib_version  90)
    elseif(${MSVC_VERSION} EQUAL 1600)
      set(msvc_lib_version 100)
    elseif(${MSVC_VERSION} EQUAL 1700)
      set(msvc_lib_version 110)
    elseif(${MSVC_VERSION} EQUAL 1800)
      set(msvc_lib_version 120)
    elseif(${MSVC_VERSION} EQUAL 1900)
      set(msvc_lib_version 140)
    elseif(${MSVC_VERSION} EQUAL 1910)
      set(msvc_lib_version 141)
    endif()
    set(msvc_lib_version_string "-vc${msvc_lib_version}")  
  endif()
  set(boost_lib_name "boost_${lib_name}")
  set(package_name "${boost_lib_name}${msvc_lib_version_string}")
  set(package_dir ${CMAKE_BINARY_DIR}/packages/${package_name})
  if(EXISTS ${package_dir})
    message(STATUS "Existing boost library \"${package_name}\" found in nuget package dir.")
  else()
    message(STATUS "Installing ${package_name}")
    install_nuget_package(${package_name})
  endif()
  add_library(${boost_lib_name} INTERFACE)
  target_link_libraries(${boost_lib_name} INTERFACE boost)
  target_link_libraries(boost_libs INTERFACE ${boost_lib_name})
  #check for 32_bits
  if("${CMAKE_SIZEOF_VOID_P}" STREQUAL "4")
    set(bits "32")
  else()
    set(bits "64")
  endif()
  file(TO_NATIVE_PATH "${package_dir}/lib/native/address-model-${bits}/lib" lib_link_path)
  message(STATUS "Adding lib include path ${lib_link_path}")
  target_link_libraries(${boost_lib_name} INTERFACE "-LIBPATH:${lib_link_path}")
endfunction(install_boost_lib lib_name)

  if (BORLAND)
    include(Borland.cmake)
  endif()
  add_library(boost_tr1 INTERFACE)
  add_library(boost INTERFACE)
  add_library(boost_libs INTERFACE)
  if(MSVC AND NOT BOOST_ROOT)
    set(BOOST_PACKAGE_PATH ${CMAKE_BINARY_DIR}/packages/boost/lib/native/include)
    if(EXISTS ${BOOST_PACKAGE_PATH})
      MESSAGE(STATUS "NuGet Boost package found")
    else()
      install_nuget_package(boost)
    endif()
    
    set(BOOST_ROOT ${BOOST_PACKAGE_PATH})
  endif()
  
if(BOOST_ROOT)
  message(STATUS "Using boost directory: ${BOOST_ROOT}")
  
  if (BORLAND)
    target_compile_options(boost INTERFACE "-I\"${BOOST_ROOT}\"")
  else()
    target_include_directories(boost SYSTEM INTERFACE "${BOOST_ROOT}")
  endif()
  target_compile_definitions(boost INTERFACE BOOST_USE_WINDOWS_H INTERFACE BOOST_THREAD_USE_LIB)
  
  target_link_libraries(boost_tr1 INTERFACE boost)
  
  if (BORLAND)
    target_compile_options(boost_tr1 INTERFACE "-I\"${BOOST_ROOT}/boost/tr1/tr1\"")
  else()
    target_include_directories(boost_tr1 SYSTEM INTERFACE "${BOOST_ROOT}/boost/tr1/tr1")
  endif()
else()
  message(WARNING "No boost configured, only native features supported")
endif()